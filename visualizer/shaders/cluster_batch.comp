#version 450 core

#define LOCAL_SIZE_X 16u
#define LOCAL_SIZE_Y 8u
#define LOCAL_SIZE_Z 1u

#define CLUSTER_BUFFER_SIZE 4096
#define GROUP_CHILDREN_COUNT 32
#define BATCH_COUNT 1024

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

struct Cluster {
    float lodError;
    uint  material_id;
    uint  grouop_id;
    uint  lodLevel;
    vec4  sphere;
    vec4  halfExtents;
};

struct Group {
    float maxParentError;
    float minChildError;
    uint  lodLevel;
    vec4  sphere;
    vec4  halfExtents;
    uint  children[32];
};

layout (std430, binding = 0) buffer ClusterBuffer {
    uint cluster_count;
    Cluster clusters[];
};

layout (std430, binding = 1) buffer GroupBuffer {
    uint group_count;
    Group groups[];
};

layout(std430, binding = 2) buffer BatchCount
{
	uint cluster_offset;
    uint batchCounts[];
};

layout(std430, binding = 3) buffer DrawInstanceBuffer
{
    // first half is the cluster id, second half is the sorted instance id (batch)
    uint cluster_instance[];
};

layout (binding = 4) uniform SceneData {
    mat4 view;
    mat4 proj;
    vec4 planes[6];
};

void main () {
    uint tid = gl_LocalInvocationID.x + gl_LocalInvocationID.y * gl_WorkGroupSize.x;
    uint gid = gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x;

    if (tid >= cluster_offset) return;

    // convert batch count to batch offset
    if (tid == 0) {
        uint offset = 0, count = 0;
        for (uint i = 0; i < BATCH_COUNT; i++) {
            count = batchCounts[i];
            batchCounts[i] = offset;
            offset += count;
        }
    }

    Cluster cluster = clusters[tid];
    uint material_id = cluster.material_id;

    if (material_id < BATCH_COUNT) {
        uint offset = atomicAdd(batchCounts[material_id], 1);
        cluster_instance[CLUSTER_BUFFER_SIZE + offset] = tid;
    }
}